use std::fs;
use std::error::Error;
use std::convert::TryInto;

pub fn build_intcode_from_input(input: &str) -> Result<IntCode, Box<dyn Error>> {
    let contents = fs::read_to_string(input)?;
    let instructions: Vec<i32> = contents.split(",")
        .map(|s| s.trim())
        .filter(|s| !s.is_empty())
        .map(|s| s.parse::<i32>().unwrap())
        .collect();
    
    Ok(IntCode {
        instructions: instructions,
        ..Default::default()
    })
}

#[derive(Clone)]
pub struct IntCode {
    instructions: Vec<i32>,
    state: String,
    index: usize,
}

impl Default for IntCode {
    fn default() -> IntCode {
        IntCode {
            instructions: Vec::new(),
            state: "initialized".to_string(),
            index: 0 as usize,
        }
    }
}

impl IntCode {
    fn next(&mut self) {
        if self.state != "running" && self.state != "initialized" {
            return;
        }

        let instruction = self.instructions[self.index];
        let opcode = instruction % 100;
        println!("{}", opcode);
        let advance = match opcode {
            1 => self.op1(),
            2 => self.op2(),
            3 => self.op3(),
            4 => self.op4(),
            _ => { // should probably error if opcode != 99
                self.state = "terminated".to_string();
                return; 
            },
        };
 
        self.state = "running".to_string();
        self.index = self.index + advance as usize;
    }

    fn op1(&mut self) -> i32 {
        let first = self.get_value(1).unwrap();
        let second = self.get_value(2).unwrap();
        let target = self.instructions[self.index + 3]; // in day2, target is mode 1, but input doesn't contain mode

        self.instructions[target as usize] = first + second;
 
        4
    }

    fn op2(&mut self) -> i32 {
        let first = self.get_value(1).unwrap();
        let second = self.get_value(2).unwrap();
        let target = self.instructions[self.index + 3];

        self.instructions[target as usize] = first * second;
    
        4
    }

    fn op3(&mut self) -> i32 {
        let target = self.get_value(1).unwrap();
        let input: i32 = read!();
        
        self.instructions[target as usize] = input;

        2
    }

    fn op4(&mut self) -> i32 {
        let value = self.get_value(1).unwrap();
        
        match value {
            0 => {
                println!("Test {} successful: {}", self.index, value);
            },
            _ => {
                println!("Test {} finished with non-zero code: {}", self.index, value);
            }
        }
        
        2
    }
    
    fn get_value(&mut self, offset: i32) -> Result<i32, i32> {
        let index_or_value = self.instructions[self.index + offset as usize];
        let mode = self.get_mode(offset - 1);

        match mode {
            0 => {
                return Ok(self.instructions[index_or_value as usize]);
            },
            1 => {
                return Ok(index_or_value);
            },
            _ => Err(-1)
        }
    }

    fn get_mode(&mut self, number: i32) -> i32 {
        self.instructions[self.index] / (100 * 10_i32.pow(number.try_into().unwrap())) % 10
    }

    pub fn run(&mut self) {
        while self.state != "terminated" {
            self.next();
        }
    }

    pub fn get_result(self) -> i32{
        self.instructions[0 as usize]
    }

    pub fn set_noun(&mut self, noun: i32) {
        self.instructions[1 as usize] = noun;
    }

    pub fn set_verb(&mut self, verb: i32) {
        self.instructions[2 as usize] = verb;
    }
}

